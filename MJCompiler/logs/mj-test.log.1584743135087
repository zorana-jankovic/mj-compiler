INFO  23:24:50,042 - Compiling source file: D:\faks\zorana\4.Godina-1.Semestar\pp1\projekat\MJCompiler_jz160143\workspace\MJCompiler\test\parserProgram.mj
INFO  23:24:50,092 - #2 program
INFO  23:24:50,092 - #15 ParserTest
INFO  23:24:50,093 - #15 int
INFO  23:24:50,094 - #15 x
INFO  23:24:50,099 - #12 ,
INFO  23:24:50,100 - #15 y
INFO  23:24:50,100 - #5 ;
INFO  23:24:50,100 - #21 const
INFO  23:24:50,102 - #15 int
INFO  23:24:50,102 - #15 z
INFO  23:24:50,102 - #8 =
INFO  23:24:50,102 - #44 true
INFO  23:24:50,102 - #5 ;
INFO  23:24:50,105 - #15 cha
INFO  23:24:50,107 - #15 r
INFO  23:24:50,107 - #5 ;
INFO  23:24:50,107 - #15 int
INFO  23:24:50,107 - #42 [
ERROR 23:24:50,107 - 
Sintaksna greska na liniji 5
INFO  23:24:50,109 - #43 ]
INFO  23:24:50,109 - #15 j
INFO  23:24:50,109 - #12 ,
INFO  23:24:50,109 - #15 p
INFO  23:24:50,110 - #5 ;
INFO  23:24:50,110 - #3 {
ERROR 23:24:50,110 - Izvrsen oporavak do ; ili , u liniji 5
INFO  23:24:50,110 - #15 int
INFO  23:24:50,111 - #15 k
INFO  23:24:50,111 - #6 (
INFO  23:24:50,111 - #15 int
INFO  23:24:50,111 - #15 x
INFO  23:24:50,111 - #12 ,
INFO  23:24:50,112 - #15 char
INFO  23:24:50,112 - #15 c
INFO  23:24:50,112 - #7 )
INFO  23:24:50,112 - #3 {
INFO  23:24:50,113 - #11 print
INFO  23:24:50,114 - #6 (
INFO  23:24:50,114 - #15 x
INFO  23:24:50,114 - #7 )
INFO  23:24:50,116 - #5 ;
INFO  23:24:50,116 - #4 }
INFO  23:24:50,117 - #13 void
INFO  23:24:50,118 - #15 main
INFO  23:24:50,118 - #6 (
INFO  23:24:50,118 - #7 )
INFO  23:24:50,118 - #3 {
INFO  23:24:50,119 - #15 k
INFO  23:24:50,119 - #6 (
INFO  23:24:50,119 - #14 3
INFO  23:24:50,119 - #12 ,
INFO  23:24:50,119 - #45 c
INFO  23:24:50,119 - #7 )
INFO  23:24:50,120 - #5 ;
INFO  23:24:50,120 - #16 if
INFO  23:24:50,121 - #6 (
INFO  23:24:50,121 - #15 milosjeglup
INFO  23:24:50,121 - #7 )
INFO  23:24:50,128 - #15 x
INFO  23:24:50,128 - #8 =
INFO  23:24:50,128 - #14 10
INFO  23:24:50,129 - #5 ;
INFO  23:24:50,129 - #17 else
INFO  23:24:50,129 - #15 x
INFO  23:24:50,129 - #8 =
INFO  23:24:50,129 - #14 0
INFO  23:24:50,129 - #5 ;
INFO  23:24:50,130 - #4 }
INFO  23:24:50,130 - #4 }
INFO  23:24:50,146 - Program(
  ProgName(
   ParserTest
  ) [ProgName]
  MyDeclList(
    MyDeclList(
      MyDeclList(
        MyDeclList(
          MyNoDeclList(
          ) [MyNoDeclList]
          VarDeclListElem(
            VarDecl(
              Type(
               int
              ) [Type]
              VarDeclElemNoBraces(
               x
              ) [VarDeclElemNoBraces]
              MyVarDeclList(
                MyNoVarDeclList(
                ) [MyNoVarDeclList]
                VarDeclElemNoBraces(
                 y
                ) [VarDeclElemNoBraces]
              ) [MyVarDeclList]
            ) [VarDecl]
          ) [VarDeclListElem]
        ) [MyDeclList]
        ConstDeclListElem(
          ConstDecl(
            Type(
             int
            ) [Type]
            ConstDeclElem(
             z
              BoolConst(
              ) [BoolConst]
            ) [ConstDeclElem]
            MyNoConstDeclList(
            ) [MyNoConstDeclList]
          ) [ConstDecl]
        ) [ConstDeclListElem]
      ) [MyDeclList]
      VarDeclListElem(
        VarDecl(
          Type(
           cha
          ) [Type]
          VarDeclElemNoBraces(
           r
          ) [VarDeclElemNoBraces]
          MyNoVarDeclList(
          ) [MyNoVarDeclList]
        ) [VarDecl]
      ) [VarDeclListElem]
    ) [MyDeclList]
    VarDeclListElem(
      VarDecl(
        Type(
         int
        ) [Type]
        ErrorStmt(
        ) [ErrorStmt]
        MyVarDeclList(
          MyNoVarDeclList(
          ) [MyNoVarDeclList]
          VarDeclElemNoBraces(
           p
          ) [VarDeclElemNoBraces]
        ) [MyVarDeclList]
      ) [VarDecl]
    ) [VarDeclListElem]
  ) [MyDeclList]
  MethodDeclarations(
    MethodDeclarations(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        MethodTypeNameRet(
          Type(
           int
          ) [Type]
         k
        ) [MethodTypeNameRet]
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDeclNoBraces(
                Type(
                 int
                ) [Type]
               x
              ) [FormalParamDeclNoBraces]
            ) [SingleFormalParamDecl]
            FormalParamDeclNoBraces(
              Type(
               char
              ) [Type]
             c
            ) [FormalParamDeclNoBraces]
          ) [FormalParamDecls]
        ) [FormParams]
        MyNoDeclListVar(
        ) [MyNoDeclListVar]
        Statements(
          NoStmt(
          ) [NoStmt]
          StatementPrint(
            NoMinusExpr(
              Terms(
                Var(
                  Design(
                   x
                    NoDesList(
                    ) [NoDesList]
                  ) [Design]
                ) [Var]
                MyNoTermList(
                ) [MyNoTermList]
              ) [Terms]
              MyNoExprList(
              ) [MyNoExprList]
            ) [NoMinusExpr]
          ) [StatementPrint]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDeclarations]
    MethodDecl(
      NoMethodTypeNameVoid(
       main
      ) [NoMethodTypeNameVoid]
      NoFormParam(
      ) [NoFormParam]
      MyNoDeclListVar(
      ) [MyNoDeclListVar]
      Statements(
        Statements(
          NoStmt(
          ) [NoStmt]
          StatementDesStat(
            DesignatorStatementFuncCall(
              Design(
               k
                NoDesList(
                ) [NoDesList]
              ) [Design]
              Actuals(
                ActualParams(
                  ActualParam(
                    NoMinusExpr(
                      Terms(
                        NumberFactor(
                         3
                        ) [NumberFactor]
                        MyNoTermList(
                        ) [MyNoTermList]
                      ) [Terms]
                      MyNoExprList(
                      ) [MyNoExprList]
                    ) [NoMinusExpr]
                  ) [ActualParam]
                  NoMinusExpr(
                    Terms(
                      CharFactor(
                      ) [CharFactor]
                      MyNoTermList(
                      ) [MyNoTermList]
                    ) [Terms]
                    MyNoExprList(
                    ) [MyNoExprList]
                  ) [NoMinusExpr]
                ) [ActualParams]
              ) [Actuals]
            ) [DesignatorStatementFuncCall]
          ) [StatementDesStat]
        ) [Statements]
        StatementIfElse(
          Condition(
            CondTerms(
              CondFactNoRelop(
                NoMinusExpr(
                  Terms(
                    Var(
                      Design(
                       milosjeglup
                        NoDesList(
                        ) [NoDesList]
                      ) [Design]
                    ) [Var]
                    MyNoTermList(
                    ) [MyNoTermList]
                  ) [Terms]
                  MyNoExprList(
                  ) [MyNoExprList]
                ) [NoMinusExpr]
              ) [CondFactNoRelop]
              MyNoCondTermList(
              ) [MyNoCondTermList]
            ) [CondTerms]
            MyNoConditionList(
            ) [MyNoConditionList]
          ) [Condition]
          StatementDesStat(
            DesignatorStatementAssign(
              DesAssStmtm(
                Design(
                 x
                  NoDesList(
                  ) [NoDesList]
                ) [Design]
                Assign(
                ) [Assign]
                NoMinusExpr(
                  Terms(
                    NumberFactor(
                     10
                    ) [NumberFactor]
                    MyNoTermList(
                    ) [MyNoTermList]
                  ) [Terms]
                  MyNoExprList(
                  ) [MyNoExprList]
                ) [NoMinusExpr]
              ) [DesAssStmtm]
            ) [DesignatorStatementAssign]
          ) [StatementDesStat]
          StatementDesStat(
            DesignatorStatementAssign(
              DesAssStmtm(
                Design(
                 x
                  NoDesList(
                  ) [NoDesList]
                ) [Design]
                Assign(
                ) [Assign]
                NoMinusExpr(
                  Terms(
                    NumberFactor(
                     0
                    ) [NumberFactor]
                    MyNoTermList(
                    ) [MyNoTermList]
                  ) [Terms]
                  MyNoExprList(
                  ) [MyNoExprList]
                ) [NoMinusExpr]
              ) [DesAssStmtm]
            ) [DesignatorStatementAssign]
          ) [StatementDesStat]
        ) [StatementIfElse]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDeclarations]
) [Program]
INFO  23:24:50,147 - ===================================
